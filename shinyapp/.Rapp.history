tmp2 <- tmp[tmp[,8]=="서산",]
head(tmp2)
tmp2[!duplicated(tmp2[,3])]
tmp3 <- tmp2[!duplicated(tmp2[,3]), ]
dim(tmp3)
xtabs(~bus_info[,"cityName"]+bus_info[,"typeName"])[55:65,]
!duplicated(tmp2[,3])
which(!duplicated(tmp2[,3]))
tail(tmp2)
which(duplicated(tmp2[,3]))
tmp2[409:412, ]
tmp2[tmp2[,3] == 1380537, ]
tmp[8,]
tmp[,8]
which(tmp[,8] =="당진군")
tmp[,1:5]
tmp[,c(2,3,4,8)]
tmp[,c(2,3,4,5,8)]
dim(tmp[tmp[,8]=="서산",])dim(bus_info)
dim(bus_info)
head(bus_info)
id <- 870#
    wb <- paste("http://map.naver.com/search2/local.nhn?type=BUS_ROUTE&query=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)
res
res$result
res$result$bus
res$result$bus$list
id <- 870#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)
i<-1
id <- 5519
wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)
res
res$result$station
$result$station[[1]]
res$result$station[[1]]
res$result$station[[2]]
names(res)
res$lane$section$graphPos
res$result$lane$section$graphPos
unlist(res$result$lane$section$graphPos)
matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)
lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
    colnames(path) <- c("x", "y")
lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
    colnames(lanepath) <- c("x", "y")
plot(lanepatj, type="l")
plot(lanepath, type="l")
paste("/Users/jang/naver/path/", id, ".RData", sep="")
for(i in 1:nrow(bus_info)){#
    cat(round(100*i/nrow(bus_info), "\t", id, "\n")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)#
    res$lane$section$graphPos#
    lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
    colnames(lanepath) <- c("x", "y")#
    save(lanepath, file=paste("/Users/jang/naver/path/", id, ".RData", sep=""))#
    save(res, file=paste("/Users/jang/naver/path/", id, "_info.RData", sep=""))#
}
us_info[i, "id"]
bus_info[i, "id"]
cat(round(100*i/nrow(bus_info), "\t", id, "\n")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)
for(i in 1:nrow(bus_info)){#
    cat(round(100*i/nrow(bus_info)), "\t", id, "\n")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)#
    lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
    colnames(lanepath) <- c("x", "y")#
    save(lanepath, file=paste("/Users/jang/naver/path/", id, ".RData", sep=""))#
    save(res, file=paste("/Users/jang/naver/path/", id, "_info.RData", sep=""))#
}
for(i in 1:nrow(bus_info)){#
    cat(round(100*i/nrow(bus_info)), "\t", id, "\n")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)#
    lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
    colnames(lanepath) <- c("x", "y")#
    save(lanepath, file=paste("/Users/jang/naver/path/", id, ".RData", sep=""))#
    save(res, file=paste("/Users/jang/naver/info/", id, "_info.RData", sep=""))#
    rm(wb, a, res)#
}
for(i in 1:nrow(bus_info)){#
    cat(round(100*i/nrow(bus_info), digits=2), "\t", id, "\n")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)#
    lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
    colnames(lanepath) <- c("x", "y")#
    save(lanepath, file=paste("/Users/jang/naver/path/", id, ".RData", sep=""))#
    save(res, file=paste("/Users/jang/naver/info/", id, "_info.RData", sep=""))#
    rm(wb, a, res)#
}
for(i in 1:nrow(bus_info)){#
    cat(round(100*i/nrow(bus_info), digits=2), "\t", id, "\t")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)#
    lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
    colnames(lanepath) <- c("x", "y")#
    cat(nrow(lanepath), "\n")#
    save(lanepath, file=paste("/Users/jang/naver/path/", id, ".RData", sep=""))#
    save(res, file=paste("/Users/jang/naver/info/", id, "_info.RData", sep=""))#
    rm(wb, a, res, lanepath)#
}
i
cat(round(100*i/nrow(bus_info), digits=2), "\t", id, "\t")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)#
    lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)
res
a
nullpath <- NULL
cat(round(100*i/nrow(bus_info), digits=2), "\t", id, "\t")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)#
    if(!is.null(res$result)){#
        lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
        colnames(lanepath) <- c("x", "y")#
        cat(nrow(lanepath), "\n")#
        save(lanepath, file=paste("/Users/jang/naver/path/", id, ".RData", sep=""))#
        save(res, file=paste("/Users/jang/naver/info/", id, "_info.RData", sep=""))#
        rm(wb, a, res, lanepath)#
    } else {#
        nullpath <- c(nulpath, id)#
        cat("\n")#
    }
nullpath <- c(nullpath, id)
nullpath
i
for(i in 952:nrow(bus_info)){#
    cat(round(100*i/nrow(bus_info), digits=2), "\t", id, "\t")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)#
    if(!is.null(res$result)){#
        lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
        colnames(lanepath) <- c("x", "y")#
        cat(nrow(lanepath), "\n")#
        save(lanepath, file=paste("/Users/jang/naver/path/", id, ".RData", sep=""))#
        save(res, file=paste("/Users/jang/naver/info/", id, "_info.RData", sep=""))#
        rm(wb, a, res, lanepath)#
    } else {#
        nullpath <- c(nullpath, id)#
        cat("\n")#
    }#
}
320*100/90
res
i
cat(round(100*i/nrow(bus_info), digits=2), "\t", id, "\t")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)
res
i
nullpath
bus_info[i, "id"]
for(i in 10273:nrow(bus_info)){#
    cat(round(100*i/nrow(bus_info), digits=2), "\t", id, "\t")#
    id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)#
    if(!is.null(res$result)){#
        lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
        colnames(lanepath) <- c("x", "y")#
        cat(nrow(lanepath), "\n")#
        save(lanepath, file=paste("/Users/jang/naver/path/", id, ".RData", sep=""))#
        save(res, file=paste("/Users/jang/naver/info/", id, "_info.RData", sep=""))#
        rm(wb, a, res, lanepath)#
    } else {#
        nullpath <- c(nullpath, id)#
        cat("\n")#
    }#
}
nullpath
plot(lanepath, type="l")
id <- bus_info[i, "id"]#
    wb <- paste("http://map.naver.com/pubtrans/getBusRouteInfo.nhn?busID=", id, sep="")#
    a <- readLines(wb)#
    a <- paste(a, collapse="")#
    res <- fromJSON(a)
lanepath <- matrix(unlist(res$result$lane$section$graphPos), byrow=TRUE, ncol=2)#
        colnames(lanepath) <- c("x", "y")
plot(lanepath, type="l")
d = map.depends()#
c = dependencies(d)#
#
hist(c, freq = TRUE)#
plot(c, freq = FALSE, logscale = "y")
map.depends()
install.packages("packdep")
library(packdep)
Not run:#
d = map.depends()#
c = dependencies(d)#
hist(c, freq = TRUE)#
plot(c, freq = FALSE, logscale = "y")#
## End(Not run)
d
?map.depends
library(sp)  # vector data#
library(raster)  # raster data#
library(rgdal)  # input/output, projections#
library(rgeos)  # geometry ops#
library(spdep)  # spatial dependenc
points from scratch#
coords = cbind(x, y)#
sp = SpatialPoints(coords)#
# make spatial data frame#
spdf = SpatialPointsDataFrame(coords, data)#
spdf = SpatialPointsDataFrame(sp, data)#
# promote data frame to spatial#
coordinates(data) = cbind(x, y)#
coordinates(data) = ~lon + lat#
# back to data#
as.data.frame(data)#
bbox(spdf)
library(lars)
library(lasso2)
?lars
data(diabetes)#
par(mfrow=c(2,2))#
attach(diabetes)#
object <- lars(x,y)#
plot(object)#
object2 <- lars(x,y,type="lar")#
plot(object2)#
object3 <- lars(x,y,type="for") # Can use abbreviations#
plot(object3)#
detach(diabetes)
is(object)
plot.lars
?lars
help(package=lars)
lars
scale
drop(one %*% x)/n
one <- rep(1, n)
cred <- read.csv("~/Dropbox/OJT/R/Data/Credit.csv", header=TRUE)#
cred <- cred[,-1]
head(credit)
head(cred
)
n <- nrow(cred)
one <- rep(1, n)
drop(one %*% x)/n
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance
head(x)
drop(one %*% x)/n
one
one %*% x
apply(x, 2, sum)
dim(one)
t(one)
t(one) %*% x
lars
meanx <- drop(one %*% x)/n#
        x <- scale(x, meanx, FALSE)
meanx
x
normx <- sqrt(drop(one %*% (x^2)))
normx/sqrt(n) < eps
lars
eps = .Machine$double.eps
normx/sqrt(n) < eps
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace) #
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    } else{#
        ignores <- NULL#
    }#
    names(normx) <- NULL#
    x <- scale(x, FALSE, normx)#
}
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx)
lars
library(glmnet)#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx)
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )
library(glmnet)
install.packages("beta <- scale(beta, FALSE, normx)")
install.packages"glmnet
install.packages("glmnet")
cred <- read.csv("~/D
library(glmnet)#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx)
library(glmnet)#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{
library(glmnet)#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)
library(glmnet)#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
meanx <- drop(one %*% x)/n
cred <- read.csv("~/Dropbox/OJT/R/Data/Credit.csv", header=TRUE)#
cred <- cred[,-1]
library(glmnet)#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx)
lars
library(glmnet)
lars
library(lars)
lars
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx)
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )
plot(fit.ridge, xvar="lambda", label=TRUE)
names(fit.ridge)
fit.ridge$beta
scale(fit.ridge$beta, FALSE, normx)
scale(t(fit.ridge$beta), FALSE, normx)
matplot(scale(t(fit.ridge$beta), FALSE, normx))
plot(fit.ridge, xvar="lambda", label=TRUE)
head(fit.ridge$beta)
fit.ridge$beta[2,]
fit.ridge$beta[2,]/n
n
fit.ridge$beta[2,]/20
matplot(t(fit.ridge$beta)/sqrt(n), type="l")
matplot(n:1, t(fit.ridge$beta)/sqrt(n), type="l")
dim(t(fit.ridge$beta)/sqrt(n))
matplot(100:1, t(fit.ridge$beta)/sqrt(n), type="l")
lars
plot.lars
?lars
fit <- lars(x,y)
plot(fit)
plot(fit, "df")
plot(fit, "arc.length")
plot(fit, "df")
?lars
library(glmnet)#
library(lars)
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance
fit <- lars(x,y)
plot(fit, "df")
plot(fit, "arc.length")
plot(fit, "df")
plot(fit, "step")
lasso
lasso2
library(lasso2)
lasso
lasso2
help(package=lasso2)
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx)#
#
#beta <- scale(beta, FALSE, normx)#
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )#
plot(fit.ridge, xvar="lambda", label=TRUE)
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx) *200#
#
#beta <- scale(beta, FALSE, normx)#
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )#
plot(fit.ridge, xvar="lambda", label=TRUE)
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx) *20#
#
#beta <- scale(beta, FALSE, normx)#
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )#
plot(fit.ridge, xvar="lambda", label=TRUE)
n
fit <- lm(y~x)
fit
summary(fit)
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance
fit <- lm(y~x)
summary(fit)
head(x)
head(cred)
levels(cred$Gender)
summary(lm(Balnace ~ ., data=cred))
summary(lm(Balance ~ ., data=cred))
normx
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx) *20#
#
#beta <- scale(beta, FALSE, normx)#
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )#
plot(fit.ridge, xvar="lambda", label=TRUE)
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx) *10#
#
#beta <- scale(beta, FALSE, normx)#
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )#
plot(fit.ridge, xvar="lambda", label=TRUE)
glmnet#
#
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx) *20#
#
#beta <- scale(beta, FALSE, normx)#
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )
fit.ridge
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx) *12#
#
#beta <- scale(beta, FALSE, normx)#
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )#
plot(fit.ridge, xvar="lambda", label=TRUE)
names(fit.ridge)
fit.ridge$dim
fit.ridge$jerr
fit.ridge$npass
sqrt(920)
fit.ridge$offset
fit.ridge$nobs
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx) *sqrt(n-12-1)#
#
#beta <- scale(beta, FALSE, normx)#
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )#
plot(fit.ridge, xvar="lambda", label=TRUE)
library(glmnet)#
library(lars)#
#
x <- model.matrix(Balance ~ . -1, data=cred) #
y <- cred$Balance#
n <- nrow(x)#
one <- rep(1, n)#
#
meanx <- drop(one %*% x)/n#
x <- scale(x, meanx, FALSE)#
#
normx <- sqrt(drop(one %*% (x^2)))#
eps = .Machine$double.eps#
nosignal <- normx/sqrt(n) < eps#
if (any(nosignal)) {#
    ignores <- im[nosignal]#
    inactive <- im[-ignores]#
    normx[nosignal] <- eps * sqrt(n)#
    if (trace){#
        cat("LARS Step 0 :\t", sum(nosignal), "Variables with Variance < eps; dropped for good\n")#
    }#
} else{#
    ignores <- NULL#
}#
names(normx) <- NULL#
x <- scale(x, FALSE, normx)#
#
#beta <- scale(beta, FALSE, normx)#
fit.ridge <- glmnet(x, y, alpha=0, lambda = exp(seq(log(1e-02), log(1e+05), , 100)) )#
plot(fit.ridge, xvar="lambda", label=TRUE)
fit.lasso <- glmnet(x, y)#
plot(fit.lasso, xvar="lambda", label=TRUE)
c(134,152,189)/255
c(22,77,182)/255
Nile
hn <- hist(Nile)
hn <- hist(Nile, plot=FALSE)
head(Nile)
summary(Nile)
is(Nale)
is(Nile)
Nile[1:10]
library(shiny)
system("rm  /Users/jang/.RData")
system("rm  /Users/jang/.Rapp.history")
runApp("~/Dropbox/ramnathv-bikeshare-a1293b0/app")
L1 <- Leaflet$new()
library(shiny)
L1 <- Leaflet$new()
library(leaflet)
L1 <- Leaflet$new()
require(rCharts)
L1 <- Leaflet$new()
require(rCharts)
L1 <- Leaflet$new()
L1
library(shiny)
runApp("~/Dropbox/ramnathv-bikeshare-a1293b0/app")
load("/Users/jang/Dropbox/ramnathv-bikeshare-a1293b0/app/fifteen.RData")
fifteen
apply(fifteen[,1:2], range)
apply(fifteen[,1:2], 2, range)
apply(fifteen[,1:2], 2, function(x) median(range(x)))
load("/Users/jang/Dropbox/ramnathv-bikeshare-a1293b0/app/fifteen.RData")
runApp("~/Dropbox/ramnathv-bikeshare-a1293b0/app")
